package com.techzen.management.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.web.SecurityFilterChain;

import javax.crypto.spec.SecretKeySpec;

@Configuration // ƒê√°nh d·∫•u l·ªõp n√†y l√† m·ªôt l·ªõp c·∫•u h√¨nh Spring
@EnableWebSecurity // K√≠ch ho·∫°t c·∫•u h√¨nh Security
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    @Value("${jwt.signerKey}")
    private String SIGNER_KEY;

    @Autowired
    CustomJwtDecoder customJwtDecoder;

    @Value("${api.prefix}")
    private String apiPrefix;

//    // ƒê·ªãnh nghƒ©a m·ªôt bean c·ªßa SecurityFilterChain ƒë·ªÉ c·∫•u h√¨nh b·∫£o m·∫≠t cho ·ª©ng d·ª•ng
//    @Bean
//    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {
//        // C·∫•u h√¨nh quy·ªÅn truy c·∫≠p cho c√°c y√™u c·∫ßu HTTP
//        httpSecurity.authorizeHttpRequests(request -> {
//            request
//                    // Cho ph√©p truy c·∫≠p kh√¥ng h·∫°n ch·∫ø ƒë·ªëi v·ªõi endpoint "/student"
//                    .requestMatchers(apiPrefix + "/auth/**").permitAll()
//                    .anyRequest().authenticated(); // nh∆∞ng request c√≤n l·∫°i ph·∫£i ƒë∆∞·ª£c x√°c th·ª±c
//        });
//
//        // V√¥ hi·ªáu h√≥a b·∫£o m·∫≠t CSRF (Cross-Site Request Forgery)
//        httpSecurity.csrf(AbstractHttpConfigurer::disable);
//        httpSecurity.oauth2ResourceServer(oauth2 ->
//                oauth2.jwt(jwtConfigurer -> jwtConfigurer.decoder(customJwtDecoder)
//                        .jwtAuthenticationConverter(jwtAuthenticationConverter())
//                )
//        );
//        // X√¢y d·ª±ng v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng SecurityFilterChain
//        return httpSecurity.build();
//    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll() // ‚úÖ Cho ph√©p t·∫•t c·∫£ request
                );
//                .oauth2ResourceServer(oauth2 -> oauth2
//                        .jwt(jwtConfigurer -> jwtConfigurer
//                                .decoder(customJwtDecoder) // üëà ƒë√£ r√µ r√†ng, kh√¥ng c·∫ßn `@Qualifier` n·∫øu autowired ƒë√∫ng
//                                .jwtAuthenticationConverter(jwtAuthenticationConverter())
//                        )
//                ); // Optional: c√≥ th·ªÉ x√≥a h·∫≥n d√≤ng n√†y n·∫øu kh√¥ng d√πng JWT

        return http.build();
    }

    @Bean
    public JwtDecoder jwtDecoder() {
        // T·∫°o kh√≥a b√≠ m·∫≠t v·ªõi thu·∫≠t to√°n HS512
        SecretKeySpec secretKeySpec = new SecretKeySpec(SIGNER_KEY.getBytes(), "HS512");

        // C·∫•u h√¨nh v√† t·∫°o JwtDecoder v·ªõi kh√≥a b√≠ m·∫≠t v√† thu·∫≠t to√°n m√£ h√≥a
        return NimbusJwtDecoder
                .withSecretKey(secretKeySpec)  // ƒê·∫∑t kh√≥a b√≠ m·∫≠t
                .macAlgorithm(MacAlgorithm.HS512)  // Ch·ªçn thu·∫≠t to√°n HS512
                .build();  // X√¢y d·ª±ng JwtDecoder
    }
    
    //401: ch∆∞a login
    //403: kh√¥ng c√≥ quy·ªÅn truy c·∫≠p

    @Bean
    public JwtAuthenticationConverter jwtAuthenticationConverter() {
        // T·∫°o JwtGrantedAuthoritiesConverter v√† ƒë·∫∑t ti·ªÅn t·ªë quy·ªÅn h·∫°n
        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
        jwtGrantedAuthoritiesConverter.setAuthorityPrefix("ROLE_");

        // T·∫°o JwtAuthenticationConverter v√† thi·∫øt l·∫≠p JwtGrantedAuthoritiesConverter
        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);

        // Tr·∫£ v·ªÅ JwtAuthenticationConverter c·∫•u h√¨nh s·∫µn
        return jwtAuthenticationConverter;
    }

}
